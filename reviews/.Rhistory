var_beta_hat <- sigma2_e*c(diag(solve(t(X)%*%X)) )
sqrt(var_beta_hat)
sqrt(var_beta_hat)*3
beta_hat
sigma2_e
e_hat
e_hat
beta_hat
var_beta_hat <- sigma2_e*as.vector(diag(solve(t(X)%*%X)) )
#
#
#generalised
G_ba <- matrix(data=0,ncol = 8,nrow = 8)
diag(G_ba) <- 1
G_ba[1,1] <- 0.5
G_ba[1,1] <- G_ba[1,2] <- 0.5
Z <- matrix(data=0,ncol = 7,nrow = 3)
Z[1,2] <- Z[1,3] <- Z[2,4] <- Z[2,5] <- Z[3,6] <- Z[3,7] <- 1
t(Z)%*%Z
G_ba*lamda
t(Z)%*%Z+G_ba*lamda
solve(G_ba)
solve(G_ba)*lamda
t(Z)%*%Z+solve(G_ba)*lamda
t(Z)%*%Z
t(X)%*%X
t(X)%*%Z)
t(X)%*%Z
View(X)
X <- matrix(data=1,ncol = 1,nrow = 3)
t(X)%*%X
#
#
#generalised
K <- matrix(data=0,ncol = 8,nrow = 8)
diag(K) <- 1
K[1,1] <- K[1,2] <- 0.5
G_ba <- t(K)%*%G%*%K
LHS <- rbind(
cbind(t(X)%*%X,t(X)%*%Z),
cbind(t(Z)%*%X, t(Z)%*%Z+solve(K)*lamda)
)
LHS <- rbind(
cbind(t(X)%*%X,t(X)%*%Z),
cbind(t(Z)%*%X, t(Z)%*%Z+solve(G_ba)*lamda)
)
G_ba <- t(K)%*%G%*%K
solve(G_ba)
#
#
#generalised
K <- matrix(data=0,ncol = 8,nrow = 7)
#
#
#generalised
K <- matrix(data=0,ncol = 7,nrow = 8)
#
#
#generalised
K <- matrix(data=0,ncol = 7,nrow = 8)
diag(K) <- 1
View(K)
#
#
#generalised
K <- matrix(data=0,ncol = 7,nrow = 8)
K[1,1] <- K[2,1] <- 0.5
for (i in 2:7) {
k[i+1,i] <- 1
}
for (i in 2:7) {
K[i+1,i] <- 1
}
View(K)
G_ba <- t(K)%*%G%*%K
View(G_ba)
X <- matrix(data=1,ncol = 1,nrow = 3)
Z <- matrix(data=0,ncol = 7,nrow = 3)
Z[1,2] <- Z[1,3] <- Z[2,4] <- Z[2,5] <- Z[3,6] <- Z[3,7] <- 1
LHS <- rbind(
cbind(t(X)%*%X,t(X)%*%Z),
cbind(t(Z)%*%X, t(Z)%*%Z+solve(G_ba)*lamda)
)
RHS <- rbind(
t(X)%*%Y,
t(Z)%*%Y
)
View(X)
Y
#
#
#generalised
Y <- c(15,8,12)
RHS <- rbind(
t(X)%*%Y,
t(Z)%*%Y
)
ANS <- solve(LHS)%*%RHS
View(ANS)
ANS <- solve(LHS)%*%RHS %>% round(2)
View(ANS)
T <- matrix(0, ncol = 8,nrow = 5)
T[1,1] <- T[3,3] <- T[3,4] <- T[4,5] <- T[4,6] <- T[4,7] <- T[4,8] <- 1
T[2,2] <- 2
View(`T`)
T <- matrix(0, ncol = 8,nrow = 5)
T[1,1] <- T[3,3] <- T[3,4] <- T[4,5] <- T[4,6] <- T[5,7] <- T[5,8] <- 1
T[2,2] <- 2
View(`T`)
T%*%ANS
View(`T`)
#
#
#next model
Z_s <- matrix(data=0,ncol = 7,nrow = 3)
Z_s[1,2] <- Z_s[2,4] <- Z_s[3,6] <- 1
View(Z_s)
Z_d <- matrix(data=0,ncol = 7,nrow = 3)
Z_d[1,3] <- Z_d[2,4] <- Z_d[3,7] <- 1
View(Z_d)
View(Z_d)
View(Z_s)
LHS <- rbind(
cbind(t(X)%*%X,t(X)%*%Z_s,t(X)%*%Z_d),
cbind(t(Z_s)%*%X,t(Z_s)%*%Z_s,t(Z_s)%*%Z_d),
cbind(t(Z_d)%*%X,t(Z_d)%*%Z_s,t(Z_d)%*%Z_d)
)
RHS <- rbind(
t(X)%*%Y,
t(Z_s)%*%Y,
t(Z_d)%*%Y
)
View(LHS)
inverse_lamda_cronecker_G_ba <- matrix(data = 0,ncol = 2,nrow = 2)
inverse_lamda_cronecker_G_ba <- solve(matrix(data=c(0.5,1.0,1.0,1.2),ncol = 2,nrow = 2))%x% G_ba
View(inverse_lamda_cronecker_G_ba)
View(LHS)
inverse_lamda_cronecker_G_ba <- solve(matrix(data=c(0.5,1.0,1.0,1.2),ncol = 2,nrow = 2))%x% G_ba
temp <- matrix(0, nrow = 15, ncol = 15)
temp[2:15, 2:15] <- inverse_lamda_cronecker_G_ba
LHS <- LHS +temp
ANS <- solve(LHS)%*%RHS
View(ANS)
ANS <- solve(LHS)%*%RHS %>% round(2)
View(ANS)
solve(matrix(data=c(0.5,1.0,1.0,1.2),ncol = 2,nrow = 2))
solve(matrix(data=c(0.5,1.0,1.0,1.2),ncol = 2,nrow = 2))%x% G_ba
inverse_lamda_cronecker_G_ba <- solve(matrix(data=c(0.9,1.0,1.0,1.2),ncol = 2,nrow = 2))%x% G_ba
temp <- matrix(0, nrow = 15, ncol = 15)
temp[2:15, 2:15] <- inverse_lamda_cronecker_G_ba
LHS <- LHS +temp
ANS <- solve(LHS)%*%RHS %>% round(2)
solve(matrix(data=c(0.9,1.0,1.0,1.2),ncol = 2,nrow = 2))
View(Z_s)
View(Z_d)
View(Z_s)
View(Z_d)
View(Z_s)
#
#
#next model
Z_s <- matrix(data=0,ncol = 7,nrow = 3)
Z_s[1,2] <- Z_s[2,4] <- Z_s[3,6] <- 1
Z_d <- matrix(data=0,ncol = 7,nrow = 3)
Z_d[1,3] <- Z_d[2,5] <- Z_d[3,7] <- 1
LHS <- rbind(
cbind(t(X)%*%X,t(X)%*%Z_s,t(X)%*%Z_d),
cbind(t(Z_s)%*%X,t(Z_s)%*%Z_s,t(Z_s)%*%Z_d),
cbind(t(Z_d)%*%X,t(Z_d)%*%Z_s,t(Z_d)%*%Z_d)
)
RHS <- rbind(
t(X)%*%Y,
t(Z_s)%*%Y,
t(Z_d)%*%Y
)
inverse_lamda_cronecker_G_ba <- solve(matrix(data=c(0.9,1.0,1.0,1.2),ncol = 2,nrow = 2))%x% G_ba
temp <- matrix(0, nrow = 15, ncol = 15)
temp[2:15, 2:15] <- inverse_lamda_cronecker_G_ba
LHS <- LHS +temp
ANS <- solve(LHS)%*%RHS %>% round(2)
inverse_lamda_cronecker_G_ba <- solve(matrix(data=c(0.9,1.0,1.0,1.2),ncol = 2,nrow = 2))%x% solve(G_ba)
temp <- matrix(0, nrow = 15, ncol = 15)
Z_s <- matrix(data=0,ncol = 7,nrow = 3)
Z_s[1,2] <- Z_s[2,4] <- Z_s[3,6] <- 1
Z_d <- matrix(data=0,ncol = 7,nrow = 3)
Z_d[1,3] <- Z_d[2,5] <- Z_d[3,7] <- 1
LHS <- rbind(
cbind(t(X)%*%X,t(X)%*%Z_s,t(X)%*%Z_d),
cbind(t(Z_s)%*%X,t(Z_s)%*%Z_s,t(Z_s)%*%Z_d),
cbind(t(Z_d)%*%X,t(Z_d)%*%Z_s,t(Z_d)%*%Z_d)
)
RHS <- rbind(
t(X)%*%Y,
t(Z_s)%*%Y,
t(Z_d)%*%Y
)
inverse_lamda_cronecker_G_ba <- solve(matrix(data=c(0.9,1.0,1.0,1.2),ncol = 2,nrow = 2))%x% solve(G_ba)
temp <- matrix(0, nrow = 15, ncol = 15)
temp[2:15, 2:15] <- inverse_lamda_cronecker_G_ba
LHS <- LHS +temp
ANS <- solve(LHS)%*%RHS %>% round(2)
View(Z_s)
Z_s <- matrix(data=0,ncol = 7,nrow = 3)
Z_s[1,2] <- Z_s[2,4] <- Z_s[3,6] <- 1
Z_d <- matrix(data=0,ncol = 7,nrow = 3)
Z_d[1,3] <- Z_d[2,5] <- Z_d[3,7] <- 1
LHS <- rbind(
cbind(t(X)%*%X,t(X)%*%Z_s,t(X)%*%Z_d),
cbind(t(Z_s)%*%X,t(Z_s)%*%Z_s,t(Z_s)%*%Z_d),
cbind(t(Z_d)%*%X,t(Z_d)%*%Z_s,t(Z_d)%*%Z_d)
)
RHS <- rbind(
t(X)%*%Y,
t(Z_s)%*%Y,
t(Z_d)%*%Y
)
inverse_lamda_cronecker_G_ba <- solve(matrix(data=c(0.9,1.0,1.0,1.2),ncol = 2,nrow = 2))%x% solve(G_ba)
temp <- matrix(0, nrow = 15, ncol = 15)
temp[2:15, 2:15] <- inverse_lamda_cronecker_G_ba
LHS <- LHS +temp
ANS <- solve(LHS)%*%RHS %>% round(2)
###
###
ped <- data.frame(ID=c(1,2,3,4,5),
Sire=c(0,1,1,3,3),
Dam=c(0,0,2,2,1))
# Initialize gametic relationship matrix
'makeG' <- function(gam, nrow, ncol){
G <- matrix(0, nrow=nrow, ncol=ncol)
# Fill upper triangular part of the matrix
for (i in 1:ncol) {
for (j in i:ncol) {  # Start from i to include diagonal
if (i == j) {
G[i,j] <- 1  # Set diagonal elements to 1
} else {
# Check if gamete j has known parents
if (gam$paternal[j] > 0 && gam$maternal[j] > 0) {
# Calculate relationship as average of relationships with parents
G[i,j] <- 0.5 * (G[i,gam$paternal[j]] + G[i,gam$maternal[j]])
} else {
# If parents unknown, set relationship to 0
G[i,j] <- 0
}
# Make matrix symmetric
G[j,i] <- G[i,j]
}
}
}
}
0.5*0.9+0.5*1.2+1
1/0.25
1/(0.5*0.9+0.5*1.2+1)
###
###
ped <- data.frame(ID=c(1,2,3,),
Sire=c(0,1,1),
Dam=c(0,0,2))
###
###
ped <- data.frame(ID=c(1,2,3),
Sire=c(0,1,1),
Dam=c(0,0,2))
# Initialize gametic relationship matrix
'makeG' <- function(gam, nrow, ncol){
G <- matrix(0, nrow=nrow, ncol=ncol)
# Fill upper triangular part of the matrix
for (i in 1:ncol) {
for (j in i:ncol) {  # Start from i to include diagonal
if (i == j) {
G[i,j] <- 1  # Set diagonal elements to 1
} else {
# Check if gamete j has known parents
if (gam$paternal[j] > 0 && gam$maternal[j] > 0) {
# Calculate relationship as average of relationships with parents
G[i,j] <- 0.5 * (G[i,gam$paternal[j]] + G[i,gam$maternal[j]])
} else {
# If parents unknown, set relationship to 0
G[i,j] <- 0
}
# Make matrix symmetric
G[j,i] <- G[i,j]
}
}
}
}
###
###
ped <- data.frame(  ID=c(1,2,3),
sire=c(0,1,1),
dam=c(0,0,2))
# Define gametes
gam <- data.frame(gamete=c(1,2,3,4,5,6),
paternal=c(0,0,1,0,1,3),
maternal=c(0,0,2,0,2,4))
makeG(gam = gam,6,6)
return(G)}
return(G)}
# Initialize gametic relationship matrix
'makeG' <- function(gam, nrow, ncol){
G <- matrix(0, nrow=nrow, ncol=ncol)
# Fill upper triangular part of the matrix
for (i in 1:ncol) {
for (j in i:ncol) {  # Start from i to include diagonal
if (i == j) {
G[i,j] <- 1  # Set diagonal elements to 1
} else {
# Check if gamete j has known parents
if (gam$paternal[j] > 0 && gam$maternal[j] > 0) {
# Calculate relationship as average of relationships with parents
G[i,j] <- 0.5 * (G[i,gam$paternal[j]] + G[i,gam$maternal[j]])
} else {
# If parents unknown, set relationship to 0
G[i,j] <- 0
}
# Make matrix symmetric
G[j,i] <- G[i,j]
}
}
}
return(G)
}
makeG(gam = gam,6,6)
G <- makeG(gam = gam,6,6)
T <- rbind(c(0.5,0.5,0,0,0,0),
c(0,0,0.5,0.5,0,0),
c(0,0,0,0,1,0),
c(0,0,0,0,0,1)) %>% as.matrix()
View(`T`)
G_ba <- T %*% G %*% t(T)
View(G_ba)
Z_s <- rbind(c(0,0,1,0),
c(0,0,0.5,0.5),
c(0,0,0.5,0.5))
Z_s <- rbind(c(0,0,1,0),
c(0,0,0.5,0.5),
c(0,0,0.5,0.5)) %>% as.matrix()
Z_d <- rbind(c(0,0,0,1),
c(0,1,0,0),
c(1,0,0,0)) %>% as.matrix()
D <- diag(1,0.49,0.49)
LHS <- rbind(
cbind(t(X)%*%D%*%X,t(X)%*%D%*%Z_s,t(X)%*%D%*%Z_d),
cbind(t(Z_s)%*%D%*%X,t(Z_s)%*%D%*%Z_s,t(Z_s)%*%D%*%Z_d),
cbind(t(Z_d)%*%D%*%X,t(Z_d)%*%D%*%Z_s,t(Z_d)%*%D%*%Z_d)
)
###
###
X <- c(1,1,1) %>% as.matrix()
View(X)
Y <- c(8,12,15) %>% as.matrix()
View(Y)
t(X)%*%D%*%X
dim(X)
dim(Y)
Z_d
D
D <- diag(c(1,0.49,0.49),ncol = 3,nrow = 3)
D
LHS <- rbind(
cbind(t(X)%*%D%*%X,t(X)%*%D%*%Z_s,t(X)%*%D%*%Z_d),
cbind(t(Z_s)%*%D%*%X,t(Z_s)%*%D%*%Z_s,t(Z_s)%*%D%*%Z_d),
cbind(t(Z_d)%*%D%*%X,t(Z_d)%*%D%*%Z_s,t(Z_d)%*%D%*%Z_d)
)
RHS <- rbind(
t(X)%*%D%*%Y,
t(Z_s)%*%D%*%Y,
t(Z_d)%*%D%*%Y
)
'makeGAM' <- function(ped) {
# Sort pedigree by ID to ensure correct ordering
ped <- ped[order(ped$ID), ]
# Initialize gamete dataframe
n_ind <- nrow(ped)
n_gam <- 2 * n_ind
gam <- data.frame(
gamete = 1:n_gam,
paternal = rep(0, n_gam),
maternal = rep(0, n_gam)
)
# Process each individual
for (i in 1:n_ind) {
ind_id <- ped$ID[i]
sire_id <- ped$sire[i]
dam_id <- ped$dam[i]
# Gamete indices for current individual
pat_gam_id <- 2 * ind_id - 1  # Paternal gamete
mat_gam_id <- 2 * ind_id      # Maternal gamete
# Set paternal gamete origins
if (sire_id > 0) {
# Link to sire's gametes
gam$paternal[pat_gam_id] <- 2 * sire_id - 1  # Sire's paternal gamete
gam$maternal[pat_gam_id] <- 2 * sire_id      # Sire's maternal gamete
}
# Set maternal gamete origins
if (dam_id > 0) {
# Link to dam's gametes
gam$paternal[mat_gam_id] <- 2 * dam_id - 1  # Dam's paternal gamete
gam$maternal[mat_gam_id] <- 2 * dam_id      # Dam's maternal gamete
}
}
return(gam)
}
# Example of calculating mixed model equations in R
# with 3 observations and a 3x3 matrix
# Define pedigree
ped <- data.frame(  ID=c(1,2,3,4),
sire=c(0,1,1,3),
dam=c(0,0,2,2))
makeGAM((ped))
'make_gam' <- function(ped) {
# Sort pedigree by ID to ensure correct ordering
ped <- ped[order(ped$ID), ]
# Initialize gamete dataframe
n_ind <- nrow(ped)
n_gam <- 2 * n_ind
gam <- data.frame(
gamete = 1:n_gam,
paternal = rep(0, n_gam),
maternal = rep(0, n_gam)
)
# Process each individual
for (i in 1:n_ind) {
ind_id <- ped$ID[i]
sire_id <- ped$sire[i]
dam_id <- ped$dam[i]
# Gamete indices for current individual
pat_gam_id <- 2 * ind_id - 1  # Paternal gamete
mat_gam_id <- 2 * ind_id      # Maternal gamete
# Set paternal gamete origins
if (sire_id > 0) {
# Link to sire's gametes
gam$paternal[pat_gam_id] <- 2 * sire_id - 1  # Sire's paternal gamete
gam$maternal[pat_gam_id] <- 2 * sire_id      # Sire's maternal gamete
}
# Set maternal gamete origins
if (dam_id > 0) {
# Link to dam's gametes
gam$paternal[mat_gam_id] <- 2 * dam_id - 1  # Dam's paternal gamete
gam$maternal[mat_gam_id] <- 2 * dam_id      # Dam's maternal gamete
}
}
return(gam)
}
rm(makeGAM)
ped <- data.frame(  ID=c(1,2,3),
sire=c(0,1,1),
dam=c(0,0,2))
gam <- make_gam((ped))
gam
# Initialize gametic relationship matrix
'makeG' <- function(gam){
r <- nrow(gam)
G <- matrix(0, nrow=r, ncol=r)
# Fill upper triangular part of the matrix
for (i in 1:r) {
for (j in i:r) {  # Start from i to include diagonal
if (i == j) {
G[i,j] <- 1  # Set diagonal elements to 1
} else {
# Check if gamete j has known parents
if (gam$paternal[j] > 0 && gam$maternal[j] > 0) {
# Calculate relationship as average of relationships with parents
G[i,j] <- 0.5 * (G[i,gam$paternal[j]] + G[i,gam$maternal[j]])
} else {
# If parents unknown, set relationship to 0
G[i,j] <- 0
}
# Make matrix symmetric
G[j,i] <- G[i,j]
}
}
}
return(G)
}
# Initialize gametic relationship matrix
'makeG' <- function(gam){
r <- nrow(gam)
G <- matrix(0, nrow=r, ncol=r)
# Fill upper triangular part of the matrix
for (i in 1:r) {
for (j in i:r) {  # Start from i to include diagonal
if (i == j) {
G[i,j] <- 1  # Set diagonal elements to 1
} else {
# Check if gamete j has known parents
if (gam$paternal[j] > 0 && gam$maternal[j] > 0) {
# Calculate relationship as average of relationships with parents
G[i,j] <- 0.5 * (G[i,gam$paternal[j]] + G[i,gam$maternal[j]])
} else {
# If parents unknown, set relationship to 0
G[i,j] <- 0
}
# Make matrix symmetric
G[j,i] <- G[i,j]
}
}
}
return(G)
}
sqrt(0.284174E-02)
sqrt(0.270085E-01)
source("replace_css_links")
setwd("~/")
setwd("C:/Users/ding/Chapter3/reviews")
source("replace_css_links")
source("replace_css_links.r")
source("replace_css_links.r")
source("replace_css_links.r")
source("replace_css_links.r")
source("replace_css_links.r")
source("replace_css_links.r")
source("replace_css_links.r")
